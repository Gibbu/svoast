<script>
	import Usage from './examples/_usage.svelte';
	import Types from './examples/_types.svelte';
	import Options from './examples/_options.svelte';
	import Position from './examples/_position.svelte';
	import Custom from './examples/_custom.svelte';
</script>

# Installation

Install using your favourite package manager:

```
npm i svoast -D
```

```
yarn add svoast -D
```

```
pnpm add svoast -D
```

---

# Usage

Import the `<Toasts />` component to your main layout file.

```svelte filename="routes/+layout.svelte"
<script>
	import { Toasts } from 'svoast';
</script>

<Toasts />
```

And then call the `toast` function anywhere! (on the client, of course)

```svelte filename="routes/settings/+page.svelte"
<script>
	import { toast } from 'svoast';

	async function save() {
		const { success } = await api.user.save();

		if (success) {
			toast.success('Settings successfully updated.');
		} else {
			toast.error('There was a problem trying to save your settings.', { duration: 12000 });
		}
	}
</script>

<button on:click={save}>Save changes</button>
```

<Usage />

---

# Types

You have 5 types to toasts to play with.

Info, attention, success, warning, and error.  
These _should_ be enough to express to the user what they mean.

<Types />

---

# Options

There are 2 options that you can pass; `closable` and `duration`.

`closable` will allow the user to dismiss the toast early.  
`duration` well, will be the time the toast is visible.

<Options />

---

# Positioning

The `<Toasts />` component has a `position` prop that allows you to change what position the toasts are displayed from.  
This will change what direction they popout from and how they stack on each other.

<Position />

---

# Styling

SVoast uses CSS variables.

```css
:root {
	/* Spacing for the container and between each toast */
	--svoast-offset: 16px;
	--svoast-gap: 16px;

	/* The toast itself. */
	--svoast-bg: #333;
	--svoast-text: #fff;
	--svoast-padding: 10px 15px 10px 18px;
	--svoast-radius: 4px;
	--svoast-shadow: 0 2px 7px hsl(0 0% 0% / 0.25);
	--svoast-font-size: 14px;
	--svoast-dismiss-gap: 8px;
	--svoast-max-width: unset;

	/* The current colour of the toast, depending on the type. */
	--svoast-colour: '';

	/* The coloured bar */
	--svoast-bar-width: 3px;

	/* Icons */
	--svoast-icon-padding: 2px;
}
```

---

# Custom Components

If you want a completely new look and/or want to add functionality to the toasts, you can either do it globally or individually.

### Setting global toasts

Globally means setting the `component` prop on the `<Toasts />` component. All toasts that aren't defined individually will be the component you provided.  
Downsides are you're stuck with the default props that are given by this package.

```svelte filename="routes/+layout.svelte"
<script>
	import { Toasts } from 'svoast';
	import Component from '$lib/Component.svelte';
</script>

<Toasts component={Component} />
```

---

### Setting individual toasts

If you wish for freedom, set the component on each `toast` call with the `component` provided in the options object.  
The first index of the prop will be the custom component you want to use.  
The second index of the array will be any props you want to be passed down to your component.

**NOTE**: All props provided by this package are still passed down to your custom component (so no need to redefine everything).

```svelte filename="lib/LinkToast.svelte"
<script>
	// Default props from package:
	export let id;
	export let message;
	export let type;
	export let opts;

	// Custom props:
	export let link;
	export let newTab = false;
</script>

<div class="toast" style="--duration: {opts.duration}">
	<p>{message}</p>
	<a href={link} target={newTab ? '_blank' : undefined} rel={newTab ? 'noreferrer noopener' : undefined}>
		View Page
	</a>
</div>
```

```svelte {6,2} filename="routes/settings/+page.svelte"
<script>
	import { toast } from 'svoast';
	import LinkToast from '$lib/LinkToast.svelte';

	async function save() {
		toast.success('Successfully saved!', {
			component: [LinkToast, { link: '/users/@me' }]
		});
	}
</script>

<button on:click={save}>Save Changes</button>
```

<Custom />

---

### Adding a custom dismiss button

If you want a dismiss button, make sure to export an `id` prop in your custom component.  
And then you can use the `remove` method on the `toast` function.

```svelte {3,9} filename="lib/Custom.svelte"
<script>
	import { toast } from 'svoast';

	export let id;
	export let message;
</script>

<div>
	{message}
	<button on:click={() => toast.remove(id)}>X</button>
</div>
```
